import{s}from"./supabase-B6KWXDKJ.js";class u{static async login(r,t){try{const{data:e,error:a}=await s.auth.signInWithPassword({email:r,password:t});if(a)throw a;return{success:!0,user:e.user}}catch(e){return{success:!1,error:e.message}}}static async logout(){try{const{error:r}=await s.auth.signOut();if(r)throw r;return{success:!0}}catch(r){return{success:!1,error:r.message}}}static async getCurrentUser(){try{const{data:{session:r},error:t}=await s.auth.getSession();if(t)throw t;return r?.user||null}catch(r){return console.error("Error getting current user:",r),null}}static async checkAdminRole(r){try{const{data:t,error:e}=await s.from("admin_users").select("role").eq("user_id",r).eq("role","admin").single();if(e&&e.code!=="PGRST116")throw e;return!!t}catch(t){return console.error("Error checking admin role:",t),!1}}static async createAdminUser(r,t){try{const{data:e,error:a}=await s.auth.signUp({email:r,password:t});if(a)throw a;const{data:n,error:o}=await s.from("admin_users").insert([{user_id:e.user.id,role:"admin"}]).select().single();if(o)throw o;return{success:!0,user:e.user,admin:n}}catch(e){return{success:!1,error:e.message}}}static redirectToLogin(){window.location.href="/login.html"}static redirectToDashboard(){window.location.href="/admin.html"}}export{u as A};
